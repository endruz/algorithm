class Solution:
    '''
    当 s 以 0 开头时，无法解码，直接返回 0；

    对 2 个字符，可能解码成 0 种、1 种、2 种情况
    s[i] 不在合法集合中，也就是 s[i] 为 0 的情况：

    - s[i - 1] + s[i] = s[i - 1: i + 1] 也不在合法集合中（比如 00）：无法解码字符串，直接返回 0；
    - s[i - 1: i + 1] 在合法集合中（比如10）：s[i - 1: i + 1] 只有一种解码可能，所以 s[i - 1: i + 1] 的解码是固定的，dp[i] = dp[i - 2] 也就是 到i的解码方案 = 到i-2的解码方案，因为i-1到i的位置是确定的。

    s[i]在合法集合中:

    - s[i - 1: i + 1] 不在合法集合中（比如 31）：s[i - 1: i + 1] 无法解码，s[i] 单独解码,所以 dp[i] = dp[i - 1]；
    - s[i - 1: i + 1] 在合法集合中（比如 21）：这种时候 s[i - 1: i + 1] 可以解码，也可以拆开分别解码，那么这两种不同的解码会导致之后的整体解码都是不同的。所以 dp[i] = dp[i - 2] + dp[i - 1]。
    '''
    def numDecodings(self, s: str) -> int:
        if s[0] == 0:
            return 0
        a, b, c = 0, 1, 0
        for i in range(1, len(s) + 1):
            c = 0
            if s[i - 1] != '0':
                c += b
            if i > 1 and s[i - 2] != '0' and int(s[i - 2:i]) <= 26:
                c += a
            a, b = b, c
        return c
